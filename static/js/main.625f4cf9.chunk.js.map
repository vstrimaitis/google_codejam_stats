{"version":3,"sources":["model/Round.ts","styles/main.ts","utils/api.ts","utils/stats.ts","components/widgets/BarChart.tsx","components/widgets/NumberStatistic.tsx","components/widgets/ResultsTable.tsx","utils/countries.ts","components/widgets/WorldMap.tsx","components/GlobalResultsGrid.tsx","components/CountryResultsGrid.tsx","components/CountrySelect.tsx","components/TaskStatsCapsule.tsx","components/TaskCard.tsx","utils/task.ts","components/TaskGrid.tsx","components/RoundContainer.tsx","components/icons/Github.tsx","components/Header.tsx","components/Sidebar.tsx","views/MainView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["QualificationType","mainStyles","theme","createStyles","root","display","appBar","zIndex","drawer","breakpoints","up","width","flexShrink","drawerPaper","content","flexGrow","padding","spacing","flexDirection","overflowX","toolbar","mixins","progress","margin","alignSelf","menuButton","marginRight","tableRoot","axiosInstance","axios","create","baseURL","handleErrors","r","status","Error","statusText","data","fetchConfig","get","then","fetchRoundInfo","roundId","fetchRoundResults","BarChartType","getMaxScore","roundInfo","challenge","tasks","map","task","tests","test","value","sum","getParticipantsWithScore","results","score","filter","score1","getTotalSubmissions","result","taskInfo","totalAttempts","getParticipantsWithAtLeastOneSolved","length","getNumberOfParticipantsByCountry","maxEntries","getStatsByCountry","a","b","groupByScore","minScore","maxScore","groups","Map","Array","from","groupBy","index","arr","kvp","sort","scores","i","push","convert","compare","country","entries","slice","isQualificationEnabled","qualification","undefined","type","NONE","didQualify","RANK","rank","threshold","SCORE","NumberStatistic","withStyles","card","textAlign","number","label","classes","Card","CardContent","className","Typography","variant","color","buildColumnHeadersList","showCountry","round","name","options","searchable","download","ResultsTable","withTheme","Paper","title","displayname","Link","target","href","id","b64url","encode","Icon","Check","Clear","buildRowData","columns","print","rowsPerPageOptions","rowsPerPage","responsive","selectableRows","viewColumns","BarChart","props","HORIZONTAL","scales","xAxes","ticks","beginAtZero","text","legend","labels","keys","datasets","backgroundColor","palette","primary","dark","borderColor","borderWidth","hoverBackgroundColor","light","hoverBorderColor","values","renderHorizontal","barPercentage","categoryPercentage","renderVertical","countries","isoCode","readableName","isoCodesByCountry","c","constructData","participants","has","idx","WorldMap","useMemo","gutterBottom","main","value-suffix","size","GlobalResultsGrid","groupsByParticipants","groupsByAverageScore","average","getAverageScoreByCountry","groupsByTopScorers","getNumberOfParticipantsWithScoreByCountry","groupsByScore","Grid","container","item","xs","sm","md","fullScoreboardSize","style","VERTICAL","CountryResultsGrid","getValue","CountrySelect","countrySelect","fontFamily","typography","selectedCountry","onSelectionChanged","defaultValue","isSearchable","concat","onChange","e","blues","getStatText","stat","N","participantCount","p","participantPercentage","toFixed","P","points","K","solvedTestSetCount","TaskStatsCapsule","capsule","height","borderRadius","overflow","capsulePart","t","reverse","totalValue","reduce","s","testSetCount","countedParticipants","numSolved","res","numAttempted","calculateSolvedParts","Tooltip","placement","key","Math","max","TaskCard","taskTitle","whiteSpace","textOverflow","titleContainer","justifyContent","alignItems","pointsContainer","marginBottom","fontSize","join","v","TaskGrid","taskContainer","gridTemplateColumns","gridGap","valA","valB","localeCompare","RoundContainer","useState","isLoading","setIsLoading","setRoundInfo","roundResults","setRoundResults","useQueryParam","StringParam","setSelectedCountry","useEffect","info","console","log","setup","CircularProgress","toUpperCase","renderStats","paragraph","Github","SvgIcon","d","Header","onDrawerToggle","AppBar","position","Toolbar","IconButton","aria-label","onClick","Menu","noWrap","Date","document","lastModified","getUTCFullYear","toString","padStart","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","formatLastUpdateDate","component","Sidebar","nested","paddingLeft","isDrawerOpen","setIsDrawerOpen","openYear","setOpenYear","handleDrawerToggle","renderDrawer","toggleDrawer","rounds","List","x","year","ListItem","button","clickedYear","ListItemText","Collapse","in","timeout","unmountOnExit","disablePadding","areResultsOfficial","to","disableTypography","displayName","renderOfficialRoundLink","Badge","renderUnofficialRoundLink","Hidden","smUp","implementation","Drawer","anchor","direction","open","onClose","paper","xsDown","MainView","useParams","setRounds","selectedRound","setSelectedRound","config","Promise","resolve","setTimeout","selectRound","createMuiTheme","indigo","secondary","pink","App","ReactRouterRoute","Route","Fragment","CssBaseline","path","children","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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Q,qBG1FhByB,GAAY,CACvB,CACEC,QAAS,KACTC,aAAc,eAEhB,CACED,QAAS,KACTC,aAAc,WAEhB,CACED,QAAS,KACTC,aAAc,WAEhB,CACED,QAAS,KACTC,aAAc,kBAEhB,CACED,QAAS,KACTC,aAAc,WAEhB,CACED,QAAS,KACTC,aAAc,UAEhB,CACED,QAAS,KACTC,aAAc,YAEhB,CACED,QAAS,KACTC,aAAc,cAEhB,CACED,QAAS,KACTC,aAAc,aAEhB,CACED,QAAS,KACTC,aAAc,WAEhB,CACED,QAAS,KACTC,aAAc,aAEhB,CACED,QAAS,KACTC,aAAc,WAEhB,CACED,QAAS,KACTC,aAAc,cAEhB,CACED,QAAS,KACTC,aAAc,WAEhB,CACED,QAAS,KACTC,aAAc,cAEhB,CACED,QAAS,KACTC,aAAc,WAEhB,CACED,QAAS,KACTC,aAAc,WAEhB,CACED,QAAS,KACTC,aAAc,SAEhB,CACED,QAAS,KACTC,aAAc,UAEhB,CACED,QAAS,KACTC,aAAc,WAEhB,CACED,QAAS,KACTC,aAAc,0BAEhB,CACED,QAAS,KACTC,aAAc,YAEhB,CACED,QAAS,KACTC,aAAc,UAEhB,CACED,QAAS,KACTC,aAAc,kCAEhB,CACED,QAAS,KACTC,aAAc,0BAEhB,CACED,QAAS,KACTC,aAAc,UAEhB,CACED,QAAS,KACTC,aAAc,YAEhB,CACED,QAAS,KACTC,aAAc,gBAEhB,CACED,QAAS,KACTC,aAAc,WAEhB,CACED,QAAS,KACTC,aAAc,YAEhB,CACED,QAAS,KACTC,aAAc,YAEhB,CACED,QAAS,KACTC,aAAc,UAEhB,CACED,QAAS,KACTC,aAAc,kBAEhB,CACED,QAAS,KACTC,aAAc,QAEhB,CACED,QAAS,KACTC,aAAc,SAEhB,CACED,QAAS,KACTC,aAAc,SAEhB,CACED,QAAS,KACTC,aAAc,YAEhB,CACED,QAAS,KACTC,aAAc,eAEhB,CACED,QAAS,KACTC,aAAc,oBAEhB,CACED,QAAS,KACTC,aAAc,cAEhB,CACED,QAAS,KACTC,aAAc,WAEhB,CACED,QAAS,KACTC,aAAc,QAEhB,CACED,QAAS,KACTC,aAAc,UAEhB,CACED,QAAS,KACTC,aAAc,kBAEhB,CACED,QAAS,KACTC,aAAc,oBAEhB,CACEA,aAAc,qBAEhB,CACED,QAAS,KACTC,aAAc,WAEhB,CACED,QAAS,KACTC,aAAc,YAEhB,CACED,QAAS,KACTC,aAAc,YAEhB,CACED,QAAS,KACTC,aAAc,sBAEhB,CACED,QAAS,KACTC,aAAc,WAEhB,CACED,QAAS,KACTC,aAAc,SAEhB,CACED,QAAS,KACTC,aAAc,eAEhB,CACED,QAAS,KACTC,aAAc,WAEhB,CACED,QAAS,KACTC,aAAc,YAEhB,CACED,QAAS,KACTC,aAAc,QAEhB,CACED,QAAS,KACTC,aAAc,WAEhB,CACED,QAAS,KACTC,aAAc,UAEhB,CACED,QAAS,KACTC,aAAc,SAEhB,CACED,QAAS,KACTC,aAAc,WAEhB,CACED,QAAS,KACTC,aAAc,WAEhB,CACED,QAAS,KACTC,aAAc,SAEhB,CACED,QAAS,KACTC,aAAc,UAEhB,CACED,QAAS,KACTC,aAAc,aAEhB,CACED,QAAS,KACTC,aAAc,cAEhB,CACED,QAAS,KACTC,aAAc,aAEhB,CACED,QAAS,KACTC,aAAc,YAEhB,CACED,QAAS,KACTC,aAAc,UAEhB,CACED,QAAS,KACTC,aAAc,SAEhB,CACED,QAAS,KACTC,aAAc,YAEhB,CACED,QAAS,KACTC,aAAc,aAEhB,CACED,QAAS,KACTC,aAAc,WAEhB,CACED,QAAS,KACTC,aAAc,WAEhB,CACED,QAAS,KACTC,aAAc,SAEhB,CACED,QAAS,KACTC,aAAc,aAEhB,CACED,QAAS,KACTC,aAAc,QAEhB,CACED,QAAS,KACTC,aAAc,QAEhB,CACED,QAAS,KACTC,aAAc,WAEhB,CACED,QAAS,KACTC,aAAc,eAEhB,CACED,QAAS,KACTC,aAAc,UAEhB,CACED,QAAS,KACTC,aAAc,SAEhB,CACED,QAAS,KACTC,aAAc,WAEhB,CACED,QAAS,KACTC,aAAc,SAEhB,CACED,QAAS,KACTC,aAAc,UAEhB,CACED,QAAS,KACTC,aAAc,UAEhB,CACED,QAAS,KACTC,aAAc,cAEhB,CACED,QAAS,KACTC,aAAc,SAEhB,CACED,QAAS,KACTC,aAAc,UAEhB,CACED,QAAS,KACTC,aAAc,UAEhB,CACED,QAAS,KACTC,aAAc,cAEhB,CACED,QAAS,KACTC,aAAc,QAEhB,CACED,QAAS,KACTC,aAAc,UAEhB,CACED,QAAS,KACTC,aAAc,WAEhB,CACED,QAAS,KACTC,aAAc,WAEhB,CACED,QAAS,KACTC,aAAc,iBAEhB,CACED,QAAS,KACTC,aAAc,aAEhB,CACED,QAAS,KACTC,aAAc,cAEhB,CACED,QAAS,KACTC,aAAc,SAEhB,CACED,QAAS,KACTC,aAAc,qBAEhB,CACED,QAAS,KACTC,aAAc,cAEhB,CACED,QAAS,KACTC,aAAc,UAEhB,CACED,QAAS,KACTC,aAAc,YAEhB,CACED,QAAS,KACTC,aAAc,SAEhB,CACED,QAAS,KACTC,aAAc,cAEhB,CACED,QAAS,KACTC,aAAc,aAEhB,CACED,QAAS,KACTC,aAAc,UAEhB,CACED,QAAS,KACTC,aAAc,WAEhB,CACED,QAAS,KACTC,aAAc,UAEhB,CACED,QAAS,KACTC,aAAc,YAEhB,CACED,QAAS,KACTC,aAAc,cAEhB,CACED,QAAS,KACTC,aAAc,WAEhB,CACED,QAAS,KACTC,aAAc,cAEhB,CACED,QAAS,KACTC,aAAc,mBAEhB,CACED,QAAS,KACTC,aAAc,WAEhB,CACED,QAAS,KACTC,aAAc,SAEhB,CACED,QAAS,KACTC,aAAc,eAEhB,CACED,QAAS,KACTC,aAAc,eAEhB,CACED,QAAS,KACTC,aAAc,aAEhB,CACED,QAAS,KACTC,aAAc,SAEhB,CACED,QAAS,KACTC,aAAc,WAEhB,CACED,QAAS,KACTC,aAAc,eAEhB,CACED,QAAS,KACTC,aAAc,UAEhB,CACED,QAAS,KACTC,aAAc,QAEhB,CACED,QAAS,KACTC,aAAc,YAEhB,CACED,QAAS,KACTC,aAAc,aAEhB,CACED,QAAS,KACTC,aAAc,UAEhB,CACED,QAAS,KACTC,aAAc,YAEhB,CACED,QAAS,KACTC,aAAc,QAEhB,CACED,QAAS,KACTC,aAAc,eAEhB,CACED,QAAS,KACTC,aAAc,UAEhB,CACED,QAAS,KACTC,aAAc,YAEhB,CACED,QAAS,KACTC,aAAc,eAEhB,CACED,QAAS,KACTC,aAAc,SAEhB,CACED,QAAS,KACTC,aAAc,WAEhB,CACED,QAAS,KACTC,aAAc,UAEhB,CACED,QAAS,KACTC,aAAc,UAEhB,CACED,QAAS,KACTC,aAAc,cAEhB,CACED,QAAS,KACTC,aAAc,gBAEhB,CACED,QAAS,KACTC,aAAc,WAEhB,CACED,QAAS,KACTC,aAAc,UAEhB,CACED,QAAS,KACTC,aAAc,aAEhB,CACED,QAAS,KACTC,aAAc,gBAEhB,CACED,QAAS,KACTC,aAAc,YAEhB,CACED,QAAS,KACTC,aAAc,YAEhB,CACED,QAAS,KACTC,aAAc,WAEhB,CACED,QAAS,KACTC,aAAc,gBAEhB,CACED,QAAS,KACTC,aAAc,gDAEhB,CACED,QAAS,KACTC,aAAc,eAEhB,CACED,QAAS,KACTC,aAAc,SAEhB,CACED,QAAS,KACTC,aAAc,aAEhB,CACED,QAAS,KACTC,aAAc,SAEhB,CACED,QAAS,KACTC,aAAc,aAEhB,CACED,QAAS,KACTC,aAAc,UAEhB,CACED,QAAS,KACTC,aAAc,eAEhB,CACED,QAAS,KACTC,aAAc,SAEhB,CACED,QAAS,KACTC,aAAc,UAEhB,CACED,QAAS,KACTC,aAAc,cAEhB,CACED,QAAS,KACTC,aAAc,YAEhB,CACED,QAAS,KACTC,aAAc,YAEhB,CACED,QAAS,KACTC,aAAc,QAEhB,CACED,QAAS,KACTC,aAAc,WAEhB,CACED,QAAS,KACTC,aAAc,uBAEhB,CACED,QAAS,KACTC,aAAc,WAEhB,CACED,QAAS,KACTC,aAAc,UAEhB,CACED,QAAS,KACTC,aAAc,gBAEhB,CACED,QAAS,KACTC,aAAc,4BAEhB,CACED,QAAS,KACTC,aAAc,UAEhB,CACED,QAAS,KACTC,aAAc,+BAEhB,CACED,QAAS,KACTC,aAAc,uBAEhB,CACED,QAAS,KACTC,aAAc,UAEhB,CACED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","file":"static/js/main.625f4cf9.chunk.js","sourcesContent":["export enum QualificationType {\n    NONE = \"NONE\",\n    SCORE = \"SCORE\",\n    RANK = \"RANK\"\n}\n\ntype DisabledRoundQualification = {\n    type: QualificationType.NONE;\n};\n\ntype EnabledRoundQualification = {\n    type: QualificationType.SCORE | QualificationType.RANK;\n    threshold: number;\n};\n\nexport type RoundQualification =\n    | DisabledRoundQualification\n    | EnabledRoundQualification;\n\nexport interface Round {\n    id: string;\n    year: number;\n    displayName: string;\n    qualification: RoundQualification;\n    areResultsOfficial: boolean;\n}\n","import { createStyles, Theme } from \"@material-ui/core\";\n\nconst drawerWidth = 240;\nexport const mainStyles = (theme: Theme) =>\n    createStyles({\n        root: {\n            display: \"flex\"\n        },\n        appBar: {\n            zIndex: theme.zIndex.drawer + 1\n        },\n        drawer: {\n            [theme.breakpoints.up(\"sm\")]: {\n                width: drawerWidth,\n                flexShrink: 0\n            }\n        },\n        drawerPaper: {\n            width: drawerWidth\n        },\n        content: {\n            flexGrow: 1,\n            padding: theme.spacing(3),\n            display: \"flex\",\n            flexDirection: \"column\",\n            overflowX: \"auto\"\n        },\n        toolbar: theme.mixins.toolbar,\n        progress: {\n            margin: theme.spacing(2),\n            alignSelf: \"center\"\n        },\n        menuButton: {\n            marginRight: 20,\n            [theme.breakpoints.up(\"sm\")]: {\n                display: \"none\"\n            }\n        },\n        tableRoot: {\n            overflowX: \"auto\"\n        }\n    });\n","import axios, { AxiosResponse } from \"axios\";\nimport { Config } from \"../model/Config\";\nimport { RoundInfo } from \"../model/RoundInfo\";\nimport { RoundResult } from \"../model/RoundResult\";\n\nconst axiosInstance = axios.create({\n    baseURL: \"/google_codejam_stats\"\n})\n\nconst handleErrors = <T>(r: AxiosResponse<T>) => {\n    if (r.status < 200 || r.status >= 300)\n        throw new Error(r.status + \": \" + r.statusText);\n    return r.data;\n};\n\nexport const fetchConfig = () =>\n    axiosInstance.get<Config>(\"config.json\").then(handleErrors);\n\nexport const fetchRoundInfo = (roundId: string) =>\n    axiosInstance.get<RoundInfo>(`round_data/info/${roundId}.json`).then(handleErrors);\n\nexport const fetchRoundResults = (roundId: string) =>\n    axiosInstance\n        .get<RoundResult[]>(`round_data/scores/${roundId}.json`)\n        .then(handleErrors);\n","import \"typescript-array-extensions\";\nimport { RoundInfo } from \"../model/RoundInfo\";\nimport { RoundResult } from \"../model/RoundResult\";\nimport { RoundQualification, QualificationType } from \"../model/Round\";\n\nexport const getMaxScore = (roundInfo: RoundInfo) =>\n    roundInfo.challenge.tasks\n        .map(task => task.tests.map(test => test.value).sum())\n        .sum();\n\nexport const getParticipantsWithScore = (\n    results: RoundResult[],\n    score: number\n) => results.filter(r => r.score1 === score);\n\nexport const getTotalSubmissions = (results: RoundResult[]) =>\n    results\n        .map(result => result.taskInfo.map(task => task.totalAttempts).sum())\n        .sum();\n\nexport const getParticipantsWithAtLeastOneSolved = (results: RoundResult[]) =>\n    results.filter(\n        result => result.taskInfo.filter(task => task.score > 0).length > 0\n    );\n\nexport const getNumberOfParticipantsByCountry = (\n    results: RoundResult[],\n    maxEntries?: number\n) => getStatsByCountry(results, r => r.length, (a, b) => -a + b, maxEntries);\n\nexport const getAverageScoreByCountry = (\n    results: RoundResult[],\n    maxEntries?: number\n) =>\n    getStatsByCountry(\n        results,\n        r => r.map(result => result.score1).average(),\n        (a, b) => -a + b,\n        maxEntries\n    );\n\nexport const getNumberOfParticipantsWithScoreByCountry = (\n    results: RoundResult[],\n    score: number,\n    maxEntries?: number\n) =>\n    getStatsByCountry(\n        results,\n        r => r.filter(result => result.score1 === score).length,\n        (a, b) => -a + b,\n        maxEntries\n    );\n\nexport const groupByScore = (\n    results: RoundResult[],\n    minScore: number,\n    maxScore: number\n) => {\n    const groups = new Map(\n        Array.from(results.groupBy((result, index, arr) => result.score1))\n            .map(kvp => [kvp[0], kvp[1].length] as [number, number])\n            .sort((a, b) => a[0] - b[0])\n    );\n    const scores = [];\n    for (let i = minScore; i <= maxScore; i++) scores.push(i);\n    return new Map(scores.map(score => [score, groups.get(score) || 0]));\n};\n\nexport const getStatsByCountry = <T>(\n    results: RoundResult[],\n    convert: (result: RoundResult[]) => T,\n    compare: (a: T, b: T) => number,\n    maxEntries?: number\n) =>\n    new Map(\n        Array.from(\n            results.groupBy((result, index, arr) => result.country).entries()\n        )\n            .map(kvp => [kvp[0], convert(kvp[1])] as [string, T])\n            .sort((a, b) => compare(a[1], b[1]))\n            .slice(0, maxEntries)\n    );\n\nexport const isQualificationEnabled = (\n    qualification?: RoundQualification\n): qualification is RoundQualification =>\n    qualification !== undefined &&\n    qualification.type !== QualificationType.NONE;\n\nexport const didQualify = (\n    result: RoundResult,\n    qualification: RoundQualification\n) =>\n    qualification.type === QualificationType.RANK\n        ? result.rank <= qualification.threshold\n        : qualification.type === QualificationType.SCORE\n        ? result.score1 >= qualification.threshold\n        : false;\n","import { Card, CardContent, WithStyles, withStyles, WithTheme } from \"@material-ui/core\";\nimport React from \"react\";\nimport { HorizontalBar, Bar } from \"react-chartjs-2\";\nimport { mainStyles } from \"../../styles/main\";\n\ninterface BarChartProps extends WithStyles<typeof mainStyles>, WithTheme {\n    data: Map<string | number, number>;\n    title: string;\n    label: string;\n    type: BarChartType;\n}\n\nexport enum BarChartType {\n    VERTICAL,\n    HORIZONTAL\n};\n\nconst renderHorizontal = ({ data, title, label, theme }: BarChartProps) => (\n    <HorizontalBar\n        options={{\n            scales: {\n                xAxes: [{\n                    ticks: {\n                        beginAtZero: true\n                    }\n                }]\n            },\n            title: {\n                display: true,\n                text: title\n            },\n            legend: {\n                display: false\n            }\n        }}\n        data={{\n            labels: Array.from(data.keys()),\n            datasets: [\n                {\n                    label,\n                    backgroundColor: theme.palette.primary.dark,\n                    borderColor: theme.palette.primary.dark,\n                    borderWidth: 1,\n                    hoverBackgroundColor: theme.palette.primary.light,\n                    hoverBorderColor: theme.palette.primary.dark,\n                    data: Array.from(data.values())\n                }\n            ]\n        }}\n    />\n);\n\nconst renderVertical = ({ data, title, label, theme }: BarChartProps) => (\n    <Bar\n        options={{\n            scales: {\n                xAxes: [{\n                    ticks: {\n                        beginAtZero: true\n                    },\n                    barPercentage: 1.0,\n                    categoryPercentage: 1.0\n                }]\n            },\n            title: {\n                display: true,\n                text: title\n            },\n            legend: {\n                display: false\n            }\n        }}\n        data={{\n            labels: Array.from(data.keys()),\n            datasets: [\n                {\n                    label: label,\n                    backgroundColor: theme.palette.primary.dark,\n                    hoverBackgroundColor: theme.palette.primary.light,\n                    data: Array.from(data.values())\n                }\n            ]\n        }}\n    />\n);\n\nexport const BarChart = withStyles(mainStyles, { withTheme: true })(\n    (props: BarChartProps) => (\n      <Card>\n        <CardContent>\n          {props.type === BarChartType.HORIZONTAL\n            ? renderHorizontal(props)\n            : renderVertical(props)}\n        </CardContent>\n      </Card>\n    )\n);\n","import React from \"react\";\nimport { withStyles, WithStyles, Theme, createStyles, Card, CardContent, Typography } from \"@material-ui/core\";\nimport { mainStyles } from \"../../styles/main\";\n\nconst styles = (theme: Theme) => createStyles({\n    ...mainStyles(theme),\n    card: {\n        textAlign: \"center\"\n    }\n});\n\ninterface NumberStatisticProps extends WithStyles<typeof styles> {\n    number: number;\n    label: string;\n}\n\nexport const NumberStatistic = withStyles(styles)(\n    ({ number, label, classes }: NumberStatisticProps) => (\n        <Card>\n            <CardContent className={classes.card}>\n                <Typography variant=\"h2\">\n                    {number}\n                </Typography>\n                <Typography color=\"textSecondary\">\n                    {label}\n                </Typography>\n            </CardContent>\n        </Card>\n    )\n);","import React from \"react\";\nimport { mainStyles } from \"../../styles/main\";\nimport { WithStyles, WithTheme, withStyles, Paper, Icon, Link } from \"@material-ui/core\";\nimport { isQualificationEnabled, didQualify } from \"../../utils/stats\";\nimport { RoundResult } from \"../../model/RoundResult\";\nimport { Round } from \"../../model/Round\";\nimport { Check, Clear } from \"@material-ui/icons\";\nimport MUIDataTable from \"mui-datatables\";\nimport CodeIcon from '@material-ui/icons/Code';\nimport b64url from \"base64url\";\n\ninterface ResultsTableProps extends WithStyles<typeof mainStyles>, WithTheme {\n    results: RoundResult[];\n    round: Round;\n    showCountry: boolean;\n}\n\nconst buildRowData = (result: RoundResult, showCountry: boolean, round: Round) =>\n    [\n        result.rank,\n        showCountry ? result.country : null,\n        result.displayname,\n        result.score1,\n        <Link\n            target=\"_blank\"\n            href={`https://codingcompetitions.withgoogle.com/codejam/submissions/${round.id}/${b64url.encode(result.displayname)}`}>\n            <CodeIcon />\n        </Link>,\n        isQualificationEnabled(round.qualification)\n            ? didQualify(result, round.qualification)\n                ? <Icon><Check /></Icon> as any\n                : <Icon><Clear /></Icon> as any\n            : null\n    ].filter(r => r != null);\n\nconst buildColumnHeadersList = (showCountry: boolean, round: Round) =>\n    [\n        \"Rank\",\n        showCountry ? \"Country\" : null,\n        \"Username\",\n        \"Score\",\n        \"Solutions\",\n        isQualificationEnabled(round.qualification)\n            ? { name: \"qualified\", label: \"Qualified\", options: { filter: false, sort: false, searchable: false, download: false } }\n            : null\n    ].filter(r => r != null) as any\n\nexport const ResultsTable = withStyles(mainStyles, { withTheme: true })(\n    ({ classes, round, results, showCountry }: ResultsTableProps) => (\n        <Paper className={classes.tableRoot}>\n            <MUIDataTable\n                title=\"Scoreboard\"\n                data={\n                    results.sort((a, b) => a.rank - b.rank)\n                        .map((result, i) =>\n                            buildRowData(result, showCountry, round)\n                        )\n                }\n                columns={buildColumnHeadersList(showCountry, round)}\n                options={{\n                    print: false,\n                    rowsPerPageOptions: [10, 25, 50, 100, 500],\n                    rowsPerPage: 50,\n                    responsive: \"scrollMaxHeight\",\n                    filter: false,\n                    selectableRows: \"none\",\n                    viewColumns: false\n                }}\n            />\n        </Paper>\n    )\n);","import 'typescript-array-extensions';\n\nexport const countries = [\n  {\n    isoCode: 'AF',\n    readableName: 'Afghanistan'\n  },\n  {\n    isoCode: 'AL',\n    readableName: 'Albania'\n  },\n  {\n    isoCode: 'DZ',\n    readableName: 'Algeria'\n  },\n  {\n    isoCode: 'AS',\n    readableName: 'American Samoa'\n  },\n  {\n    isoCode: 'AD',\n    readableName: 'Andorra'\n  },\n  {\n    isoCode: 'AO',\n    readableName: 'Angola'\n  },\n  {\n    isoCode: 'AI',\n    readableName: 'Anguilla'\n  },\n  {\n    isoCode: 'AQ',\n    readableName: 'Antarctica'\n  },\n  {\n    isoCode: 'AR',\n    readableName: 'Argentina'\n  },\n  {\n    isoCode: 'AM',\n    readableName: 'Armenia'\n  },\n  {\n    isoCode: 'AU',\n    readableName: 'Australia'\n  },\n  {\n    isoCode: 'AT',\n    readableName: 'Austria'\n  },\n  {\n    isoCode: 'AZ',\n    readableName: 'Azerbaijan'\n  },\n  {\n    isoCode: 'BH',\n    readableName: 'Bahrain'\n  },\n  {\n    isoCode: 'BD',\n    readableName: 'Bangladesh'\n  },\n  {\n    isoCode: 'BY',\n    readableName: 'Belarus'\n  },\n  {\n    isoCode: 'BE',\n    readableName: 'Belgium'\n  },\n  {\n    isoCode: 'BJ',\n    readableName: 'Benin'\n  },\n  {\n    isoCode: 'BT',\n    readableName: 'Bhutan'\n  },\n  {\n    isoCode: 'BO',\n    readableName: 'Bolivia'\n  },\n  {\n    isoCode: 'BA',\n    readableName: 'Bosnia and Herzegovina'\n  },\n  {\n    isoCode: 'BW',\n    readableName: 'Botswana'\n  },\n  {\n    isoCode: 'BR',\n    readableName: 'Brazil'\n  },\n  {\n    isoCode: 'IO',\n    readableName: 'British Indian Ocean Territory'\n  },\n  {\n    isoCode: 'VG',\n    readableName: 'British Virgin Islands'\n  },\n  {\n    isoCode: 'BN',\n    readableName: 'Brunei'\n  },\n  {\n    isoCode: 'BG',\n    readableName: 'Bulgaria'\n  },\n  {\n    isoCode: 'BF',\n    readableName: 'Burkina Faso'\n  },\n  {\n    isoCode: 'BI',\n    readableName: 'Burundi'\n  },\n  {\n    isoCode: 'KH',\n    readableName: 'Cambodia'\n  },\n  {\n    isoCode: 'CM',\n    readableName: 'Cameroon'\n  },\n  {\n    isoCode: 'CA',\n    readableName: 'Canada'\n  },\n  {\n    isoCode: 'KY',\n    readableName: 'Cayman Islands'\n  },\n  {\n    isoCode: 'TD',\n    readableName: 'Chad'\n  },\n  {\n    isoCode: 'CL',\n    readableName: 'Chile'\n  },\n  {\n    isoCode: 'CN',\n    readableName: 'China'\n  },\n  {\n    isoCode: 'CO',\n    readableName: 'Colombia'\n  },\n  {\n    isoCode: 'CD',\n    readableName: 'Congo [DRC]'\n  },\n  {\n    isoCode: 'CG',\n    readableName: 'Congo [Republic]'\n  },\n  {\n    isoCode: 'CR',\n    readableName: 'Costa Rica'\n  },\n  {\n    isoCode: 'HR',\n    readableName: 'Croatia'\n  },\n  {\n    isoCode: 'CU',\n    readableName: 'Cuba'\n  },\n  {\n    isoCode: 'CY',\n    readableName: 'Cyprus'\n  },\n  {\n    isoCode: 'CZ',\n    readableName: 'Czech Republic'\n  },\n  {\n    isoCode: 'CI',\n    readableName: \"Côte d'Ivoire\"\n  },\n  {\n    readableName: 'Decline to Answer'\n  },\n  {\n    isoCode: 'DK',\n    readableName: 'Denmark'\n  },\n  {\n    isoCode: 'DJ',\n    readableName: 'Djibouti'\n  },\n  {\n    isoCode: 'DM',\n    readableName: 'Dominica'\n  },\n  {\n    isoCode: 'DO',\n    readableName: 'Dominican Republic'\n  },\n  {\n    isoCode: 'EC',\n    readableName: 'Ecuador'\n  },\n  {\n    isoCode: 'EG',\n    readableName: 'Egypt'\n  },\n  {\n    isoCode: 'SV',\n    readableName: 'El Salvador'\n  },\n  {\n    isoCode: 'EE',\n    readableName: 'Estonia'\n  },\n  {\n    isoCode: 'ET',\n    readableName: 'Ethiopia'\n  },\n  {\n    isoCode: 'FJ',\n    readableName: 'Fiji'\n  },\n  {\n    isoCode: 'FI',\n    readableName: 'Finland'\n  },\n  {\n    isoCode: 'FR',\n    readableName: 'France'\n  },\n  {\n    isoCode: 'GA',\n    readableName: 'Gabon'\n  },\n  {\n    isoCode: 'GE',\n    readableName: 'Georgia'\n  },\n  {\n    isoCode: 'DE',\n    readableName: 'Germany'\n  },\n  {\n    isoCode: 'GH',\n    readableName: 'Ghana'\n  },\n  {\n    isoCode: 'GR',\n    readableName: 'Greece'\n  },\n  {\n    isoCode: 'GL',\n    readableName: 'Greenland'\n  },\n  {\n    isoCode: 'GP',\n    readableName: 'Guadeloupe'\n  },\n  {\n    isoCode: 'GT',\n    readableName: 'Guatemala'\n  },\n  {\n    isoCode: 'GG',\n    readableName: 'Guernsey'\n  },\n  {\n    isoCode: 'GN',\n    readableName: 'Guinea'\n  },\n  {\n    isoCode: 'HT',\n    readableName: 'Haiti'\n  },\n  {\n    isoCode: 'HN',\n    readableName: 'Honduras'\n  },\n  {\n    isoCode: 'HK',\n    readableName: 'Hong Kong'\n  },\n  {\n    isoCode: 'HU',\n    readableName: 'Hungary'\n  },\n  {\n    isoCode: 'IS',\n    readableName: 'Iceland'\n  },\n  {\n    isoCode: 'IN',\n    readableName: 'India'\n  },\n  {\n    isoCode: 'ID',\n    readableName: 'Indonesia'\n  },\n  {\n    isoCode: 'IR',\n    readableName: 'Iran'\n  },\n  {\n    isoCode: 'IQ',\n    readableName: 'Iraq'\n  },\n  {\n    isoCode: 'IE',\n    readableName: 'Ireland'\n  },\n  {\n    isoCode: 'IM',\n    readableName: 'Isle of Man'\n  },\n  {\n    isoCode: 'IL',\n    readableName: 'Israel'\n  },\n  {\n    isoCode: 'IT',\n    readableName: 'Italy'\n  },\n  {\n    isoCode: 'JM',\n    readableName: 'Jamaica'\n  },\n  {\n    isoCode: 'JP',\n    readableName: 'Japan'\n  },\n  {\n    isoCode: 'JE',\n    readableName: 'Jersey'\n  },\n  {\n    isoCode: 'JO',\n    readableName: 'Jordan'\n  },\n  {\n    isoCode: 'KZ',\n    readableName: 'Kazakhstan'\n  },\n  {\n    isoCode: 'KE',\n    readableName: 'Kenya'\n  },\n  {\n    isoCode: 'XK',\n    readableName: 'Kosovo'\n  },\n  {\n    isoCode: 'KW',\n    readableName: 'Kuwait'\n  },\n  {\n    isoCode: 'KG',\n    readableName: 'Kyrgyzstan'\n  },\n  {\n    isoCode: 'LA',\n    readableName: 'Laos'\n  },\n  {\n    isoCode: 'LV',\n    readableName: 'Latvia'\n  },\n  {\n    isoCode: 'LB',\n    readableName: 'Lebanon'\n  },\n  {\n    isoCode: 'LS',\n    readableName: 'Lesotho'\n  },\n  {\n    isoCode: 'LI',\n    readableName: 'Liechtenstein'\n  },\n  {\n    isoCode: 'LT',\n    readableName: 'Lithuania'\n  },\n  {\n    isoCode: 'LU',\n    readableName: 'Luxembourg'\n  },\n  {\n    isoCode: 'MO',\n    readableName: 'Macau'\n  },\n  {\n    isoCode: 'MK',\n    readableName: 'Macedonia [FYROM]'\n  },\n  {\n    isoCode: 'MG',\n    readableName: 'Madagascar'\n  },\n  {\n    isoCode: 'MW',\n    readableName: 'Malawi'\n  },\n  {\n    isoCode: 'MY',\n    readableName: 'Malaysia'\n  },\n  {\n    isoCode: 'MT',\n    readableName: 'Malta'\n  },\n  {\n    isoCode: 'MQ',\n    readableName: 'Martinique'\n  },\n  {\n    isoCode: 'MU',\n    readableName: 'Mauritius'\n  },\n  {\n    isoCode: 'MX',\n    readableName: 'Mexico'\n  },\n  {\n    isoCode: 'MD',\n    readableName: 'Moldova'\n  },\n  {\n    isoCode: 'MC',\n    readableName: 'Monaco'\n  },\n  {\n    isoCode: 'MN',\n    readableName: 'Mongolia'\n  },\n  {\n    isoCode: 'ME',\n    readableName: 'Montenegro'\n  },\n  {\n    isoCode: 'MA',\n    readableName: 'Morocco'\n  },\n  {\n    isoCode: 'MZ',\n    readableName: 'Mozambique'\n  },\n  {\n    isoCode: 'MM',\n    readableName: 'Myanmar [Burma]'\n  },\n  {\n    isoCode: 'NA',\n    readableName: 'Namibia'\n  },\n  {\n    isoCode: 'NP',\n    readableName: 'Nepal'\n  },\n  {\n    isoCode: 'NL',\n    readableName: 'Netherlands'\n  },\n  {\n    isoCode: 'NZ',\n    readableName: 'New Zealand'\n  },\n  {\n    isoCode: 'NI',\n    readableName: 'Nicaragua'\n  },\n  {\n    isoCode: 'NE',\n    readableName: 'Niger'\n  },\n  {\n    isoCode: 'NG',\n    readableName: 'Nigeria'\n  },\n  {\n    isoCode: 'KP',\n    readableName: 'North Korea'\n  },\n  {\n    isoCode: 'NO',\n    readableName: 'Norway'\n  },\n  {\n    isoCode: 'OM',\n    readableName: 'Oman'\n  },\n  {\n    isoCode: 'PK',\n    readableName: 'Pakistan'\n  },\n  {\n    isoCode: 'PS',\n    readableName: 'Palestine'\n  },\n  {\n    isoCode: 'PA',\n    readableName: 'Panama'\n  },\n  {\n    isoCode: 'PY',\n    readableName: 'Paraguay'\n  },\n  {\n    isoCode: 'PE',\n    readableName: 'Peru'\n  },\n  {\n    isoCode: 'PH',\n    readableName: 'Philippines'\n  },\n  {\n    isoCode: 'PL',\n    readableName: 'Poland'\n  },\n  {\n    isoCode: 'PT',\n    readableName: 'Portugal'\n  },\n  {\n    isoCode: 'PR',\n    readableName: 'Puerto Rico'\n  },\n  {\n    isoCode: 'QA',\n    readableName: 'Qatar'\n  },\n  {\n    isoCode: 'RO',\n    readableName: 'Romania'\n  },\n  {\n    isoCode: 'RU',\n    readableName: 'Russia'\n  },\n  {\n    isoCode: 'RW',\n    readableName: 'Rwanda'\n  },\n  {\n    isoCode: 'RE',\n    readableName: 'Réunion'\n  },\n  {\n    isoCode: 'SA',\n    readableName: 'Saudi Arabia'\n  },\n  {\n    isoCode: 'SN',\n    readableName: 'Senegal'\n  },\n  {\n    isoCode: 'RS',\n    readableName: 'Serbia'\n  },\n  {\n    isoCode: 'SG',\n    readableName: 'Singapore'\n  },\n  {\n    isoCode: 'SX',\n    readableName: 'Sint Maarten'\n  },\n  {\n    isoCode: 'SK',\n    readableName: 'Slovakia'\n  },\n  {\n    isoCode: 'SI',\n    readableName: 'Slovenia'\n  },\n  {\n    isoCode: 'SO',\n    readableName: 'Somalia'\n  },\n  {\n    isoCode: 'ZA',\n    readableName: 'South Africa'\n  },\n  {\n    isoCode: 'GS',\n    readableName: 'South Georgia and the South Sandwich Islands'\n  },\n  {\n    isoCode: 'KR',\n    readableName: 'South Korea'\n  },\n  {\n    isoCode: 'ES',\n    readableName: 'Spain'\n  },\n  {\n    isoCode: 'LK',\n    readableName: 'Sri Lanka'\n  },\n  {\n    isoCode: 'SD',\n    readableName: 'Sudan'\n  },\n  {\n    isoCode: 'SZ',\n    readableName: 'Swaziland'\n  },\n  {\n    isoCode: 'SE',\n    readableName: 'Sweden'\n  },\n  {\n    isoCode: 'CH',\n    readableName: 'Switzerland'\n  },\n  {\n    isoCode: 'SY',\n    readableName: 'Syria'\n  },\n  {\n    isoCode: 'TW',\n    readableName: 'Taiwan'\n  },\n  {\n    isoCode: 'TJ',\n    readableName: 'Tajikistan'\n  },\n  {\n    isoCode: 'TZ',\n    readableName: 'Tanzania'\n  },\n  {\n    isoCode: 'TH',\n    readableName: 'Thailand'\n  },\n  {\n    isoCode: 'TG',\n    readableName: 'Togo'\n  },\n  {\n    isoCode: 'TK',\n    readableName: 'Tokelau'\n  },\n  {\n    isoCode: 'TT',\n    readableName: 'Trinidad and Tobago'\n  },\n  {\n    isoCode: 'TN',\n    readableName: 'Tunisia'\n  },\n  {\n    isoCode: 'TR',\n    readableName: 'Turkey'\n  },\n  {\n    isoCode: 'TM',\n    readableName: 'Turkmenistan'\n  },\n  {\n    isoCode: 'TC',\n    readableName: 'Turks and Caicos Islands'\n  },\n  {\n    isoCode: 'TV',\n    readableName: 'Tuvalu'\n  },\n  {\n    isoCode: 'UM',\n    readableName: 'U.S. Minor Outlying Islands'\n  },\n  {\n    isoCode: 'VI',\n    readableName: 'U.S. Virgin Islands'\n  },\n  {\n    isoCode: 'UG',\n    readableName: 'Uganda'\n  },\n  {\n    isoCode: 'UA',\n    readableName: 'Ukraine'\n  },\n  {\n    isoCode: 'AE',\n    readableName: 'United Arab Emirates'\n  },\n  {\n    isoCode: 'GB',\n    readableName: 'United Kingdom'\n  },\n  {\n    isoCode: 'US',\n    readableName: 'United States'\n  },\n  {\n    isoCode: 'UY',\n    readableName: 'Uruguay'\n  },\n  {\n    isoCode: 'UZ',\n    readableName: 'Uzbekistan'\n  },\n  {\n    isoCode: 'VA',\n    readableName: 'Vatican City'\n  },\n  {\n    isoCode: 'VE',\n    readableName: 'Venezuela'\n  },\n  {\n    isoCode: 'VN',\n    readableName: 'Vietnam'\n  },\n  {\n    isoCode: 'EH',\n    readableName: 'Western Sahara'\n  },\n  {\n    isoCode: 'YE',\n    readableName: 'Yemen'\n  },\n  {\n    isoCode: 'ZW',\n    readableName: 'Zimbabwe'\n  },\n  {\n    isoCode: 'AX',\n    readableName: 'Åland Islands'\n  }\n];\n\nexport const isoCodesByCountry = new Map<string, string>(\n  countries\n    .filter((c) => c.isoCode !== undefined)\n    .map((c) => [c.readableName, c.isoCode || \"\"])\n);\n","import React, { useMemo } from 'react';\nimport {\n  WithStyles,\n  withStyles,\n  WithTheme,\n  Card,\n  CardContent,\n  Typography\n} from '@material-ui/core';\nimport ReactWorldMap from 'react-svg-worldmap';\nimport { isoCodesByCountry } from '../../utils/countries';\nimport { mainStyles } from '../../styles/main';\n\ninterface WorldMapProps extends WithStyles<typeof mainStyles>, WithTheme {\n  data: Map<string, number>;\n  title: string;\n}\n\nconst constructData = (countries: string[], participants: number[]) => {\n  return countries\n    .filter((c) => isoCodesByCountry.has(c))\n    .map((c, idx) => ({\n      country: isoCodesByCountry.get(c) || '',\n      value: participants[idx]\n    }));\n};\n\nconst WorldMapComponent = ({ data, theme, title }: WorldMapProps) => {\n  const countries = useMemo(() => Array.from(data.keys()), [data]);\n  const participants = useMemo(() => Array.from(data.values()), [data]);\n  return (\n    <Card>\n      <CardContent>\n        <Typography variant='h5' gutterBottom>\n          {title}\n        </Typography>\n        <ReactWorldMap\n          color={theme.palette.primary.main}\n          value-suffix='people'\n          size='responsive'\n          data={constructData(countries, participants)}\n          backgroundColor='none'\n        />\n      </CardContent>\n    </Card>\n  );\n};\n\nexport const WorldMap = withStyles(mainStyles, { withTheme: true })(\n  WorldMapComponent\n);\n","import React from \"react\";\nimport { withStyles, WithStyles, WithTheme, Grid } from \"@material-ui/core\";\nimport { mainStyles } from \"../styles/main\";\nimport { RoundResult } from \"../model/RoundResult\";\nimport { Round } from \"../model/Round\";\nimport { RoundInfo } from \"../model/RoundInfo\";\nimport { getMaxScore, getNumberOfParticipantsByCountry, getAverageScoreByCountry, getNumberOfParticipantsWithScoreByCountry, groupByScore, getParticipantsWithScore, getTotalSubmissions, getParticipantsWithAtLeastOneSolved } from \"../utils/stats\";\nimport { NumberStatistic } from \"./widgets/NumberStatistic\";\nimport { ResultsTable } from \"./widgets/ResultsTable\";\nimport { BarChartType, BarChart } from \"./widgets/BarChart\";\nimport { WorldMap } from \"./widgets/WorldMap\";\n\ninterface GlobalResultsGridProps extends WithStyles<typeof mainStyles>, WithTheme {\n    results: RoundResult[];\n    round: Round;\n    roundInfo: RoundInfo;\n}\n\nexport const GlobalResultsGrid = withStyles(mainStyles, { withTheme: true })(\n    ({ results, round, roundInfo }: GlobalResultsGridProps) => {\n        const maxScore = getMaxScore(roundInfo);\n        const maxEntries = 10;\n        const groupsByParticipants = getNumberOfParticipantsByCountry(results, maxEntries);\n        const groupsByAverageScore = getAverageScoreByCountry(results, maxEntries);\n        const groupsByTopScorers = getNumberOfParticipantsWithScoreByCountry(results, maxScore, maxEntries);\n        const groupsByScore = groupByScore(results, 0, maxScore);\n        return (\n            <Grid container spacing={2}>\n                <Grid item xs={12} sm={6} md={3}>\n                    <NumberStatistic\n                        number={roundInfo.fullScoreboardSize}\n                        label=\"participants worldwide\"\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6} md={3}>\n                    <NumberStatistic\n                        number={getParticipantsWithScore(results, maxScore).length}\n                        label=\"perfect scores\"\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6} md={3}>\n                    <NumberStatistic\n                        number={getTotalSubmissions(results)}\n                        label=\"submissions in total\"\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6} md={3}>\n                    <NumberStatistic\n                        number={getParticipantsWithAtLeastOneSolved(results).length}\n                        label=\"people solved at least one test set\"\n                    />\n                </Grid>\n                <Grid item xs={12} sm={12} md={12} style={{ textAlign: \"center\" }}>\n                    <WorldMap\n                        data={getNumberOfParticipantsByCountry(results)}\n                        title=\"Participation by country\"\n                    />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <BarChart\n                        type={BarChartType.HORIZONTAL}\n                        data={groupsByParticipants}\n                        title={`Number of participants per country (top ${groupsByParticipants.size})`}\n                        label=\"number of participants\"\n                    />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <BarChart\n                        type={BarChartType.HORIZONTAL}\n                        data={groupsByAverageScore}\n                        title={`Top ${groupsByAverageScore.size} countries by average score`}\n                        label=\"average score\"\n                    />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <BarChart\n                        type={BarChartType.HORIZONTAL}\n                        data={groupsByTopScorers}\n                        title={`Top ${groupsByTopScorers.size} countries with the most top-scorers`}\n                        label=\"number of top-scorers\"\n                    />\n                </Grid>\n                <Grid item xs={12} md={6}>\n                    <BarChart\n                        type={BarChartType.VERTICAL}\n                        data={groupsByScore}\n                        title=\"Score distribution\"\n                        label=\"number of participants\"\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <ResultsTable\n                        results={results}\n                        round={round}\n                        showCountry={true}\n                    />\n                </Grid>\n            </Grid>\n        );\n    }\n);","import React from \"react\";\nimport { WithStyles, WithTheme, withStyles, Grid } from \"@material-ui/core\";\nimport { mainStyles } from \"../styles/main\";\nimport { RoundResult } from \"../model/RoundResult\";\nimport { Round } from \"../model/Round\";\nimport { RoundInfo } from \"../model/RoundInfo\";\nimport { NumberStatistic } from \"./widgets/NumberStatistic\";\nimport { getParticipantsWithScore, getParticipantsWithAtLeastOneSolved, didQualify, getMaxScore, groupByScore } from \"../utils/stats\";\nimport { ResultsTable } from \"./widgets/ResultsTable\";\nimport { BarChartType, BarChart } from \"./widgets/BarChart\";\n\ninterface CountryResultsGridProps extends WithStyles<typeof mainStyles>, WithTheme {\n    results: RoundResult[];\n    round: Round;\n    roundInfo: RoundInfo;\n}\n\nexport const CountryResultsGrid = withStyles(mainStyles, { withTheme: true })(\n    ({ results, round, roundInfo, theme }: CountryResultsGridProps) => {\n        const maxScore = getMaxScore(roundInfo);\n        const groupsByScore = groupByScore(results, 0, maxScore);\n        return (\n            <Grid container spacing={2}>\n                <Grid item xs={12} sm={6} md={3}>\n                    <NumberStatistic\n                        number={results.length}\n                        label=\"participants\"\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6} md={3}>\n                    <NumberStatistic\n                        number={getParticipantsWithScore(results, maxScore).length}\n                        label=\"perfect scores\"\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6} md={3}>\n                    <NumberStatistic\n                        number={getParticipantsWithAtLeastOneSolved(results).length}\n                        label=\"people solved at least one test set\"\n                    />\n                </Grid>\n                <Grid item xs={12} sm={6} md={3}>\n                    <NumberStatistic\n                        number={results.filter(r => didQualify(r, round.qualification)).length}\n                        label=\"people qualified for the next round\"\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <BarChart\n                        type={BarChartType.VERTICAL}\n                        data={groupsByScore}\n                        title=\"Score distribution\"\n                        label=\"number of participants\"\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <ResultsTable\n                        results={results}\n                        round={round}\n                        showCountry={false}\n                    />\n                </Grid>\n            </Grid>\n        );\n    }\n);","import React from \"react\";\nimport { withStyles, WithTheme, WithStyles, Theme, createStyles } from \"@material-ui/core\";\nimport { mainStyles } from \"../styles/main\";\nimport { countries } from \"../utils/countries\";\nimport Select from \"react-select\";\n\nconst styles = (theme: Theme) => createStyles({\n    ...mainStyles(theme),\n    countrySelect: {\n        fontFamily: theme.typography.fontFamily\n    }\n})\n\ninterface CountrySelectProps extends WithStyles<typeof styles>, WithTheme {\n    selectedCountry?: string;\n    onSelectionChanged: (country?: string) => void;\n}\n\nconst getValue = (country?: string) =>\n    country ? country : \"Worldwide\";\n\nexport const CountrySelect = withStyles(styles, { withTheme: true })(\n    ({ selectedCountry, onSelectionChanged, classes }: CountrySelectProps) => (\n        <Select\n            className={classes.countrySelect}\n            defaultValue={{ value: getValue(selectedCountry), label: getValue(selectedCountry) }}\n            isSearchable\n            options={[\"Worldwide\"].concat(countries.map(c => c.readableName)).map(c => ({ value: c, label: c }))}\n            onChange={(e: any) => onSelectionChanged(e.label === \"Worldwide\" ? undefined : e.label)}\n        />\n    )\n);","import React from \"react\";\nimport { withStyles, WithStyles, createStyles, Theme, Tooltip } from \"@material-ui/core\";\nimport { mainStyles } from \"../styles/main\";\nimport { Task, RoundInfo } from \"../model/RoundInfo\";\n\nconst styles = (theme: Theme) => createStyles({\n    ...mainStyles(theme),\n    capsule: {\n        backgroundColor: \"#B7B9C7\",\n        height: 10,\n        display: \"flex\",\n        flexDirection: \"row\",\n        borderRadius: 8,\n        overflow: \"hidden\"\n    },\n    capsulePart: {\n        height: \"100%\"\n    }\n});\n\n\ninterface Props extends WithStyles<typeof styles> {\n    task: Task;\n    roundInfo: RoundInfo;\n}\n\n// const gray = \"#dedede\";\n// const red = \"#c5221f\";\n// const blues = [\n//     \"#3F51B5\",\n//     \"#6475D9\",\n//     \"#768AFC\",\n//     \"#8FA0FC\"\n// ];\n\nconst red = \"#f50057\";\nconst blues = [\n    \"#3F51B5\",\n    \"#7380C9\",\n    \"#A7AFDD\",\n    \"#DCDFF1\"\n];\n\ninterface Stat {\n    participantCount: number;\n    participantPercentage: number;\n    solvedTestSetCount: number;\n    points: number;\n}\n\nconst getStatText = (stat: Stat): string => {\n    // N participants (p%) failed Test Set 1\n    // N participants (p%) solved 1 test set for P pts\n    // N participants (p%) solved K test sets for P total pts\n    const N = stat.participantCount;\n    const p = (stat.participantPercentage * 100).toFixed(0);\n    const P = stat.points;\n    const K = stat.solvedTestSetCount;\n    if (K === 0) {\n        return `${N} participants (${p}%) failed Test Set 1`;\n    }\n    if (K === 1) {\n        return `${N} participants (${p}%) solved 1 test set for ${P} pts`;\n    }\n    return `${N} participants (${p}%) solved ${K} test sets for ${P} total pts`;\n}\n\nconst calculateSolvedParts = (task: Task, roundInfo: RoundInfo): Stat[] => {\n    const tests = task.tests.filter(t => t.value > 0).reverse();\n    let totalValue = tests.map(t => t.value).reduce((a, s) => a + s);\n    let testSetCount = tests.length;\n    let countedParticipants = 0;\n    return tests.map(test => {\n        const participantCount = (test.numSolved || 0) - countedParticipants;\n        const res = {\n            participantCount,\n            participantPercentage: (participantCount) / roundInfo.fullScoreboardSize,\n            solvedTestSetCount: testSetCount,\n            points: totalValue\n        };\n        testSetCount--;\n        totalValue -= test.value;\n        countedParticipants += participantCount;\n        return res;\n    }).concat([{\n        participantCount: task.numAttempted - countedParticipants,\n        participantPercentage: (task.numAttempted - countedParticipants) / roundInfo.fullScoreboardSize,\n        solvedTestSetCount: 0,\n        points: 0\n    }]);\n}\n\nexport const TaskStatsCapsule = withStyles(styles, { withTheme: true })((props: Props) =>\n    <div className={props.classes.capsule}>\n        {\n            calculateSolvedParts(props.task, props.roundInfo).map((stat, i) =>\n                <Tooltip placement=\"bottom\" title={getStatText(stat)} key={i}>\n                    <div\n                        className={props.classes.capsulePart}\n                        style={{\n                            width: `${Math.max(5, stat.participantPercentage * 100)}%`,\n                            backgroundColor: stat.solvedTestSetCount > 0 ? blues[i] : red\n                        }}\n                    />\n                </Tooltip>\n            ).reverse()\n        }\n    </div>\n);","import React from \"react\";\nimport { withStyles, Card, CardContent, Typography, WithStyles, Link, Theme, createStyles, Tooltip } from \"@material-ui/core\";\nimport { mainStyles } from \"../styles/main\";\nimport { Task, RoundInfo } from \"../model/RoundInfo\";\nimport { TaskStatsCapsule } from \"./TaskStatsCapsule\";\nimport LaunchIcon from '@material-ui/icons/Launch';\n\nconst styles = (theme: Theme) => createStyles({\n    ...mainStyles(theme),\n    taskTitle: {\n        whiteSpace: \"nowrap\",\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\"\n    },\n    titleContainer: {\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\"\n    },\n    pointsContainer: {\n        marginBottom: 10\n    }\n});\n\ninterface TaskCardProps extends WithStyles<typeof styles> {\n    task: Task;\n    roundInfo: RoundInfo;\n}\n\nconst renderPoints = (task: Task): string =>\n    task.tests.filter(t => t.value > 0).map(t => `${t.value} pts`).join(\", \");\n\nexport const TaskCard = withStyles(styles, { withTheme: true })((props: TaskCardProps) =>\n    <Card>\n        <CardContent>\n            <div className={props.classes.titleContainer}>\n                <Tooltip title={props.task.title} placement=\"top\">\n                    <Typography variant=\"h6\" className={props.classes.taskTitle}>\n                        {props.task.title}\n                    </Typography>\n                </Tooltip>\n                <Link target=\"_blank\" href={`https://codingcompetitions.withgoogle.com/codejam/round/${props.roundInfo.challenge.id}/${props.task.id}`}>\n                    <LaunchIcon fontSize=\"small\" />\n                </Link>\n            </div>\n            <div className={props.classes.pointsContainer}>\n                <Typography variant=\"caption\">{renderPoints(props.task)}</Typography>\n            </div>\n            <TaskStatsCapsule task={props.task} roundInfo={props.roundInfo} />\n        </CardContent>\n    </Card >\n);","import { Task } from \"../model/RoundInfo\";\n\nexport const totalValue = (task: Task): number =>\n    task.tests.map(t => t.value).reduce((v, s) => v + s);\n\nexport const sortByTotalValue = (tasks: Task[]): Task[] =>\n    tasks.sort((a, b) => {\n        const valA = totalValue(a);\n        const valB = totalValue(b);\n        if (valA === valB) return a.title.localeCompare(b.title);\n        return valA - valB;\n    });","import React from \"react\";\nimport { withStyles, WithStyles, Theme, createStyles } from \"@material-ui/core\";\nimport { mainStyles } from \"../styles/main\";\nimport { Task, RoundInfo } from \"../model/RoundInfo\";\nimport { TaskCard } from \"./TaskCard\";\nimport { sortByTotalValue } from \"../utils/task\";\n\nconst styles = (theme: Theme) => createStyles({\n    ...mainStyles(theme),\n    taskContainer: {\n        display: \"grid\",\n        gridTemplateColumns: \"repeat(auto-fit, minmax(200px, 1fr))\",\n        gridGap: \"15px\"\n    }\n});\n\ninterface TaskGridProps extends WithStyles<typeof styles> {\n    tasks: Task[];\n    roundInfo: RoundInfo;\n}\n\nexport const TaskGrid = withStyles(styles, { withTheme: true })((props: TaskGridProps) =>\n    <div className={props.classes.taskContainer}>\n        {sortByTotalValue(props.tasks).map(task =>\n            <div key={task.id}>\n                <TaskCard task={task} roundInfo={props.roundInfo} />\n            </div>\n        )}\n    </div>\n);","import { CircularProgress, Grid, Typography, WithStyles, withStyles, WithTheme } from \"@material-ui/core\";\nimport React, { useState, FunctionComponent, useEffect } from \"react\";\nimport { Round } from \"../model/Round\";\nimport { RoundInfo } from \"../model/RoundInfo\";\nimport { RoundResult } from \"../model/RoundResult\";\nimport { mainStyles } from \"../styles/main\";\nimport { fetchRoundInfo, fetchRoundResults } from \"../utils/api\";\nimport { GlobalResultsGrid } from \"./GlobalResultsGrid\";\nimport { CountryResultsGrid } from \"./CountryResultsGrid\";\nimport { CountrySelect } from \"./CountrySelect\";\nimport { TaskGrid } from \"./TaskGrid\";\nimport { StringParam, useQueryParam } from \"use-query-params\";\n\n\ninterface RoundContainerProps extends WithStyles<typeof mainStyles>, WithTheme {\n    round?: Round;\n}\n\nconst RoundContainerComponent: FunctionComponent<RoundContainerProps> = (props) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [roundInfo, setRoundInfo] = useState<RoundInfo | undefined>(undefined);\n    const [roundResults, setRoundResults] = useState<RoundResult[]>([]);\n    const [selectedCountry, setSelectedCountry] = useQueryParam(\"country\", StringParam);\n    \n    useEffect(() => {\n        async function setup() {\n            if (!props.round) {\n                setIsLoading(false);\n                setRoundInfo(undefined);\n                setRoundResults([]);\n                return;\n            }\n            setIsLoading(true);\n            const roundId = props.round.id;\n            const info = await fetchRoundInfo(roundId);\n            const results = await fetchRoundResults(roundId);\n            console.log(info, results);\n            setIsLoading(false);\n            setRoundInfo(info);\n            setRoundResults(results);\n        }\n        setup();\n    }, [props.round]);\n\n    const renderHelp = () => (\n        <Typography paragraph>\n            Please select a round from the side menu.\n        </Typography>\n    );\n\n    const renderStats = () => {\n        if (!props.round || !roundInfo) {\n            return null;\n        }\n        const country = selectedCountry;\n        let results = roundResults;\n        if (country) {\n            results = results.filter(r => r.country.toUpperCase() === country.toUpperCase());\n        }\n        return (\n            <Grid container spacing={2}>\n                <Grid item xs={12}>\n                    <Typography variant=\"h3\" gutterBottom>\n                        Problems\n                    </Typography>\n                    <TaskGrid\n                        tasks={roundInfo?.challenge.tasks || []}\n                        roundInfo={roundInfo}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <Typography variant=\"h3\" gutterBottom>\n                        Country stats\n                    </Typography>\n                    <CountrySelect\n                        selectedCountry={selectedCountry || undefined}\n                        onSelectionChanged={setSelectedCountry}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    {!selectedCountry\n                        ? <GlobalResultsGrid round={props.round} roundInfo={roundInfo} results={results} />\n                        : <CountryResultsGrid round={props.round} roundInfo={roundInfo} results={results} />\n                    }\n                </Grid>\n            </Grid>\n        );\n    };\n\n    return (\n        <main className={props.classes.content}>\n            <div className={props.classes.toolbar} />\n            {isLoading\n                ? <CircularProgress className={props.classes.progress} color=\"secondary\" />\n                : !roundInfo\n                    ? renderHelp()\n                    : renderStats()\n            }\n        </main>\n    )\n}\n\nexport const RoundContainer = withStyles(mainStyles, { withTheme: true })(RoundContainerComponent);\n","import React from \"react\";\nimport SvgIcon from \"@material-ui/core/SvgIcon\";\n\nexport const Github = (props: any) => (\n    <SvgIcon {...props}>\n        <path d=\"M12.007 0C6.12 0 1.1 4.27.157 10.08c-.944 5.813 2.468 11.45 8.054 13.312.19.064.397.033.555-.084.16-.117.25-.304.244-.5v-2.042c-3.33.735-4.037-1.56-4.037-1.56-.22-.726-.694-1.35-1.334-1.756-1.096-.75.074-.735.074-.735.773.103 1.454.557 1.846 1.23.694 1.21 2.23 1.638 3.45.96.056-.61.327-1.178.766-1.605-2.67-.3-5.462-1.335-5.462-6.002-.02-1.193.42-2.35 1.23-3.226-.327-1.015-.27-2.116.166-3.09 0 0 1.006-.33 3.3 1.23 1.966-.538 4.04-.538 6.003 0 2.295-1.5 3.3-1.23 3.3-1.23.445 1.006.49 2.144.12 3.18.81.877 1.25 2.033 1.23 3.226 0 4.607-2.805 5.627-5.476 5.927.578.583.88 1.386.825 2.206v3.29c-.005.2.092.393.26.507.164.115.377.14.565.063 5.568-1.88 8.956-7.514 8.007-13.313C22.892 4.267 17.884.007 12.008 0z\" />\n    </SvgIcon>\n);","import { AppBar, IconButton, Toolbar, Typography, WithStyles, withStyles } from \"@material-ui/core\";\nimport { Menu } from \"@material-ui/icons\";\nimport React from \"react\";\nimport { mainStyles } from \"../styles/main\";\nimport { Github } from \"./icons/Github\";\n\ninterface HeaderProps extends WithStyles<typeof mainStyles> {\n    onDrawerToggle: () => void;\n}\n\nconst formatLastUpdateDate = () => {\n    const d = new Date(document.lastModified);\n    return \"v\" +\n        d.getUTCFullYear().toString().padStart(4, \"0\") +\n        (d.getUTCMonth() + 1).toString().padStart(2, \"0\") +\n        d.getUTCDate().toString().padStart(2, \"0\") +\n        \".\" +\n        d.getUTCHours().toString().padStart(2, \"0\") +\n        d.getUTCMinutes().toString().padStart(2, \"0\");\n}\n\nexport const Header = withStyles(mainStyles)(({ classes, onDrawerToggle }: HeaderProps) => (\n    <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n            <IconButton\n                color=\"inherit\"\n                aria-label=\"Open drawer\"\n                onClick={onDrawerToggle}\n                className={classes.menuButton}\n            >\n                <Menu />\n            </IconButton>\n            <div style={{ flexGrow: 1 }}>\n                <Typography variant=\"h6\" color=\"inherit\" noWrap>\n                    Google Code Jam Stats\n                </Typography>\n                <Typography variant=\"caption\" color=\"inherit\" noWrap>\n                    {formatLastUpdateDate()}\n                </Typography>\n            </div>\n            <IconButton\n                component=\"a\"\n                title=\"GitHub\"\n                color=\"inherit\"\n                href=\"https://github.com/vstrimaitis/google_codejam_stats\"\n                target=\"_blank\"\n            >\n                <Github />\n            </IconButton>\n        </Toolbar>\n    </AppBar >\n));","import { CircularProgress, Drawer, Hidden, List, ListItem, ListItemText, WithStyles, withStyles, WithTheme, Badge, Typography, Tooltip, Collapse, Theme, createStyles } from \"@material-ui/core\";\nimport React, { FunctionComponent, useEffect, useState } from \"react\";\nimport { Round } from \"../model/Round\";\nimport { mainStyles } from \"../styles/main\";\nimport { Header } from \"./Header\";\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport \"typescript-array-extensions\";\nimport { Link } from \"react-router-dom\";\n\nconst styles = (theme: Theme) => createStyles({\n    ...mainStyles(theme),\n    nested: {\n        paddingLeft: theme.spacing(4)\n    }\n});\n\ninterface SidebarProps extends WithStyles<typeof styles>, WithTheme {\n    isLoading: boolean;\n    rounds: Round[];\n    openYear?: number;\n}\n\nconst SidebarComponent: FunctionComponent<SidebarProps> = (props) => {\n    const { classes } = props;\n    const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n    const [openYear, setOpenYear] = useState<number | undefined>(props.openYear);\n\n    useEffect(() => setOpenYear(props.openYear), [props.openYear]);\n\n    const handleYearClick = (clickedYear: number) =>\n        setOpenYear(openYear === clickedYear ? undefined : clickedYear);\n\n    const handleDrawerToggle = () => setIsDrawerOpen(!isDrawerOpen);\n\n    const renderOfficialRoundLink = (toggleDrawer: boolean, round: Round) => (\n        <ListItem key={round.id} button className={props.classes.nested} component={Link} to={`/${round.id}`}>\n            <ListItemText\n                disableTypography={true}\n                onClick={() => {\n                    if (toggleDrawer) handleDrawerToggle();\n                }}\n            >\n                <Typography>\n                    {`${round.displayName} ${round.year}`}\n                </Typography>\n            </ListItemText>\n        </ListItem>\n    );\n\n    const renderUnofficialRoundLink = (toggleDrawer: boolean, round: Round) => (\n        <Tooltip title=\"Results are not official yet\" placement=\"right\" key={round.id}>\n            <ListItem key={round.id} button className={props.classes.nested} component={Link} to={`/${round.id}`}>\n                <ListItemText\n                    disableTypography={true}\n                    onClick={() => {\n                        if (toggleDrawer) handleDrawerToggle();\n                    }}\n                >\n                    <Badge variant=\"dot\" color=\"secondary\">\n                        <Typography>\n                            {`${round.displayName} ${round.year}`}\n                        </Typography>\n                    </Badge>\n                </ListItemText>\n            </ListItem>\n        </Tooltip>\n    );\n\n    const renderDrawer = (toggleDrawer: boolean) => {\n        const { classes, isLoading, rounds } = props;\n        return (\n            isLoading\n                ? <CircularProgress className={classes.progress} />\n                :\n                <List>\n                    {Array.from(rounds.groupBy(x => x.year).entries())\n                        .slice()\n                        .sort((a, b) => b[0]-a[0])\n                        .map(x =>\n                            <div key={x[0]}>\n                                <ListItem button onClick={() => handleYearClick(x[0])}>\n                                    <ListItemText primary={x[0]} />\n                                    {openYear === x[0] ? <ExpandLess /> : <ExpandMore />}\n                                </ListItem>\n                                <Collapse in={openYear === x[0]} timeout=\"auto\" unmountOnExit>\n                                    <List component=\"div\" disablePadding>\n                                        {\n                                            x[1].map((round: Round) =>\n                                                round.areResultsOfficial\n                                                    ? renderOfficialRoundLink(toggleDrawer, round)\n                                                    : renderUnofficialRoundLink(toggleDrawer,\n                                                        round)\n                                            )\n                                        }\n                                    </List>\n                                </Collapse>\n                            </div>\n                        )\n                    }\n                </List>\n        );\n    }\n\n    return (\n        <div>\n            <Header onDrawerToggle={handleDrawerToggle} />\n            <nav className={classes.drawer}>\n                <Hidden smUp implementation=\"css\">\n                    <Drawer\n                        className={classes.drawer}\n                        variant=\"temporary\"\n                        anchor={props.theme.direction === \"rtl\" ? \"right\" : \"left\"}\n                        open={isDrawerOpen}\n                        onClose={handleDrawerToggle}\n                        classes={{\n                            paper: classes.drawerPaper\n                        }}\n                    >\n                        {renderDrawer(true)}\n                    </Drawer>\n                </Hidden>\n                <Hidden xsDown implementation=\"css\">\n                    <Drawer\n                        className={classes.drawer}\n                        variant=\"permanent\"\n                        classes={{\n                            paper: classes.drawerPaper\n                        }}\n                        open\n                    >\n                        <div className={classes.toolbar} />\n                        {renderDrawer(false)}\n                    </Drawer>\n                </Hidden>\n            </nav>\n        </div>\n    );\n};\n\nexport const Sidebar = withStyles(styles, { withTheme: true })(SidebarComponent);\n","import { withStyles, WithStyles } from \"@material-ui/core\";\nimport React, { FunctionComponent, useState, useEffect } from \"react\";\nimport { RoundContainer } from \"../components/RoundContainer\";\nimport { Sidebar } from \"../components/Sidebar\";\nimport { Round } from \"../model/Round\";\nimport { fetchConfig } from \"../utils/api\";\nimport { mainStyles } from \"../styles/main\";\nimport { useParams } from 'react-router-dom'\n\ninterface PathParams {\n    roundId: string;\n}\n\ninterface MainViewProps extends WithStyles<typeof mainStyles> { }\n\nconst MainViewComponent: FunctionComponent<MainViewProps> = (props) => {\n    const classes = props.classes;\n    const { roundId } = useParams<PathParams>();\n    const [rounds, setRounds] = useState<Round[]>([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [selectedRound, setSelectedRound] = useState<Round | undefined>(undefined);\n\n    const selectRound = (rounds: Round[], roundId?: string) => {\n        const round = roundId ? rounds.filter(x => x.id === roundId)[0] : undefined;\n        setSelectedRound(round);\n    };\n\n    useEffect(() => {\n        async function setup() {\n            const config = await fetchConfig();\n            await new Promise(resolve => setTimeout(resolve, 1000));\n            setRounds(config.rounds);\n            setIsLoading(false);\n        }\n        setup();\n    }, []);\n\n    useEffect(() => selectRound(rounds, roundId), [roundId, rounds]);\n\n    return (\n        <div className={classes.root}>\n            <Sidebar\n                {...props}\n                isLoading={isLoading}\n                rounds={rounds}\n                openYear={selectedRound?.year}\n            />\n            <RoundContainer\n                {...props}\n                round={selectedRound}\n            />\n        </div>\n    );\n}\n\nexport const MainView = withStyles(mainStyles)(MainViewComponent);\n","import React from \"react\";\nimport { MainView } from \"./views/MainView\";\nimport { createMuiTheme, MuiThemeProvider, CssBaseline } from \"@material-ui/core\";\nimport { pink, indigo } from \"@material-ui/core/colors\";\nimport {\n    HashRouter as Router,\n    Switch,\n    Route,\n} from \"react-router-dom\";\nimport { QueryParamProvider } from 'use-query-params';\n\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: indigo,\n        secondary: pink,\n        type: \"light\"\n    }\n});\n\nconst App = () => (\n    <MuiThemeProvider theme={theme}>\n        <Router>\n            <QueryParamProvider ReactRouterRoute={Route}>\n                <React.Fragment>\n                    <CssBaseline />\n                    <Switch>\n                        <Route path=\"/:roundId?\" children={<MainView />} />\n                    </Switch>\n                </React.Fragment>\n            </QueryParamProvider>\n        </Router>\n    </MuiThemeProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"chart.js\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}